with gp as(
  select  geolocations.g<%= quote @options.level %> as g, projects.id as p_id
  from geolocations
  inner join geolocations_projects on geolocations.id = geolocations_projects.geolocation_id
  inner join projects on projects.id = geolocations_projects.project_id
  <%= @options.join_strings %>
  where projects.end_date > now() AND projects.start_date <= now()
  <%= @options.conditions %>
  ),
regions as(
  select geolocations.latitude as latitude, geolocations.longitude as longitude, geolocations.name as name, geolocations.uid as uid, geolocations.id as id
  from geolocations
  <% if @options.geolocation %>
    where geolocations.g<%= @options.g_level %>=<%= quote @options.geolocation %>
  <% end %>
  )
select regions.name, regions.latitude, regions.longitude, regions.uid, regions.id, count(distinct(gp.p_id)) as projects_count from regions
inner join gp on regions.uid = gp.g
group by regions.id, regions.name, regions.uid, regions.latitude, regions.longitude
order by projects_count DESC

-- select  geolocations.name, geolocations.id, geolocations.latitude, geolocations.uid, geolocations.longitude, count(distinct(projects.id)) as projects_count
--   from geolocations
--   inner join geolocations_projects on geolocations.id = geolocations_projects.geolocation_id
--   inner join projects on projects.id = geolocations_projects.project_id
--   <%= @options.join_strings %>
--   where projects.end_date > now() AND projects.start_date <= now()
--   <%= @options.conditions %>
--   and geolocations.adm_level=<%= @options.level %>
-- group by geolocations.id, geolocations.name, geolocations.uid, geolocations.latitude, geolocations.longitude
-- order by projects_count DESC